name: Buid and Deploy Resources to Docker Hub

on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: The image tag
        default: latest
      terraform-actions:
          type: choice
          description: 'Select an action to perform'
          options:
            - apply
            - destroy
          required: true
          default: apply

  push:
    branches:
      - main

permissions:
      id-token: write
      contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # uses: azure/login@v1
        # with:
        #   creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check out to repo
        uses: actions/checkout@v2
      - name: Change Directory
        run: |
          pwd
          echo "Changed to infrastructure Directory"

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
        
      - name: Terraform Apply
        id: apply
        if: ${{ github.event.inputs.terraform-actions == 'apply'}}
        run: terraform apply -auto-approve

      - name: create temp folder
        run: mkdir download

      - name: Save Terraform Output to JSON File
        run: |
          cd download
          terraform output -json > output.json
          echo "$(terraform output -raw aks-name)" >> output.txt
          echo -ne "$(terraform output -raw rg-name)" >> output.txt
          cat output.txt
          cat output.json
          head -1 output.txt
          cd ..

      - name: Upload Terraform Output JSON File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraformOutput
          path: download
      # - name: Create Files for Artifacts
      #   shell: bash
      #   run: |
      #     echo "$(terraform output -raw aks-name)" >> cluster.txt
      #     echo "$(terraform output -raw rg-name)" >> rg.txt
      # - name: Upload Artifacts Cluster Name
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cluster_name
      #     path: cluster.txt

      # - name: Upload Artifacts Resource Group Name
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: rg_name
      #     path: rg.txt

      - name: Terraform destroy
        id: destroy
        if: ${{ github.event.inputs.terraform-actions == 'destroy'}}
        run: terraform destroy -auto-approve
      # - name: Azure CLI script
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       az account show
  docker:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push latest
        if: ${{ !github.event.inputs.tag}}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: oluchioraekwe/taskmanager:latest

      - name: Build and push tag
        if: ${{ github.event.inputs.tag}}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: oluchioraekwe/taskmanager:${{ github.event.inputs.tag}}

  deploy-to-aks:
    needs: docker
    runs-on: ubuntu-latest
        
    steps:
      - name: Check out to repo
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Download Cluster name
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: cluster_name

      # - name: Download Resource Group name
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: rg_name
      # - name: Print cluster and rg names
      #   shell: bash
      #   run: |
      #     clusterName = `cat cluster.txt`
      #     rgName = `cat rg.txt`
      #     echo Cluster name is $clusterName and RG name is $rgName

      # - name: Use Names in this steps
      #   run: |
      #     echo Cluster name is $clusterName and RG name is $rgName in New step
      # - name: Set AKS context
      #   id: set-context
      #   uses: azure/aks-set-context@v3
      #   with:
      #     resource-group: task-rg
      #     cluster-name: taskcluster

      - name: Download Terraform output artifact
        uses: actions/download-artifact@v2
        with:
          name: terraformOutput
          path: path/to/download

      - name: Use Terraform output
        run: |
          # Access output from downloaded file
          cat path/to/download/terraform-output.txt
      - name: Set AKS context
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az aks approuting enable -g task-rg -n taskcluster
          az aks get-credentials -g task-rg -n taskcluster

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'development'
          manifests: |
             k8sconfig/app.yaml
             k8sconfig/autoscaler.yaml
          images: oluchioraekwe/taskmanager:latest
          pull-images: false

      # - name: Azure CLI script
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       az account show

      - name: Update Deployment with latest image
        if: ${{ !github.event.inputs.tag}}
        run: |
          kubectl set image deployment/taskmanager-app taskmanager-app=oluchioraekwe/taskmanager:latest -n development
          echo "Updating aks cluster with latest image"

      - name: Update Deployment with latest image and new tag
        if: ${{ github.event.inputs.tag}}
        run: |
          kubectl set image deployment/taskmanager-app taskmanager-app=oluchioraekwe/taskmanager:${{ github.event.inputs.tag}} -n development
          echo "Updating aks cluster with latest tag"
    